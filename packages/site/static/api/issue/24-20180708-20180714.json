{
  "id": "MDk6TWlsZXN0b25lMzQ4MDgyMw==",
  "number": 24,
  "url": "https://github.com/AndroidDagashi/AndroidDagashi/milestone/24",
  "title": "24-20180708-20180714",
  "description": "Kotlin/Nativeのkotlinx.serializationサポートは一部で話題になっていたようです。PrecomputedTextで高速化する話はあまり話題になっていないようですが、けっこうアツい気がします。",
  "closedAt": "2018-07-15T10:39:06Z",
  "issues": {
    "totalCount": 13,
    "pageInfo": {
      "startCursor": "Y3Vyc29yOnYyOpLPgAAAAAAABRPOFFf97w==",
      "endCursor": "Y3Vyc29yOnYyOpLPgAAAAAAAAGPOFDlxPg==",
      "hasPreviousPage": false,
      "hasNextPage": false
    },
    "nodes": [
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/306",
        "title": "Architecture Components Navigation 1.0.0-alpha3",
        "body": "https://developer.android.com/jetpack/docs/release-notes#july_12_2018\r\n\r\nいろいろ追加されたり修正されたりしてる模様。\r\nSafe Argsの引数、デフォルトがNon-Nullになってちゃんと\"Safe Args\"になったようです",
        "labels": {
          "nodes": []
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/305",
        "title": "拡張関数を使ってコンパイルエラーを起こさないコード生成ライブラリの作り方",
        "body": " https://medium.com/the-fabulous/kotlin-extension-methods-generation-15b5e6499dc8\r\n\r\nKotlinの拡張関数の型変数をうまく使って生成したコードで差し替える方法です。うまいやり方ではあるのですが、ややトリッキーなので、賛否が分かれそうです。",
        "labels": {
          "nodes": [
            {
              "name": "Kotlin",
              "description": "",
              "color": "EC953C"
            }
          ]
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/304",
        "title": "AndroidエミュレータがAMD製のCPUをサポート",
        "body": "https://android-developers.googleblog.com/2018/07/android-emulator-amd-processor-hyper-v.html\r\nhttps://www.reddit.com/r/androiddev/comments/8xebss/android_emulator_amd_processor_hyperv_support/\r\n\r\nようやく来ましたね。Hyper-Vもサポートしたようです。",
        "labels": {
          "nodes": [
            {
              "name": "reddit",
              "description": "",
              "color": "d93f0b"
            }
          ]
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/303",
        "title": "Android開発にどんなノートPC使ってる？",
        "body": "https://www.reddit.com/r/androiddev/comments/8ybm7y/what_laptop_do_you_use_for_android_dev/",
        "labels": {
          "nodes": [
            {
              "name": "reddit",
              "description": "",
              "color": "d93f0b"
            }
          ]
        },
        "comments": {
          "totalCount": 2,
          "pageInfo": {
            "startCursor": "Y3Vyc29yOnYyOpHOGB_UrQ==",
            "endCursor": "Y3Vyc29yOnYyOpHOGCThog==",
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": [
            {
              "body": "ところでMacbook Proも15インチ版がついにメモリ32GB載るようになりましたね 🤔 ",
              "publishedAt": "2018-07-13T06:28:34Z",
              "author": {
                "login": "yshrsmz",
                "url": "https://github.com/yshrsmz",
                "avatarUrl": "https://avatars.githubusercontent.com/u/654889?v=4"
              }
            },
            {
              "body": "Androidアプリ開発、CPUもメモリもストレージも必要なので悩ましいですね。むしろノートPCを諦める方が早かったりして……。",
              "publishedAt": "2018-07-15T06:20:36Z",
              "author": {
                "login": "hkurokawa",
                "url": "https://github.com/hkurokawa",
                "avatarUrl": "https://avatars.githubusercontent.com/u/6446183?v=4"
              }
            }
          ]
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/302",
        "title": "Activityを数える以外にアプリケーションがバックグラウンドに行ったことを判定する方法",
        "body": "https://www.reddit.com/r/androiddev/comments/8y9rgy/is_there_a_better_way_to_detect_when_application/\r\n\r\n[`ProcessLifecyleOwner`](https://developer.android.com/reference/android/arch/lifecycle/ProcessLifecycleOwner)使うとはかどります",
        "labels": {
          "nodes": [
            {
              "name": "reddit",
              "description": "",
              "color": "d93f0b"
            }
          ]
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/301",
        "title": "Kotlin/Native v0.8",
        "body": "https://blog.jetbrains.com/kotlin/2018/07/kotlinnative-v0-8-released/\r\nhttps://www.reddit.com/r/androiddev/comments/8ye9eq/kotlinnative_v08_released/\r\n\r\n標準ライブラリがかなり充実してきたようです。\r\nCotorutineやKtorもKotlin/Nativeのサポートを始めたようで(まだexperimentalですが)、REST API周りのコードをKotlin/Nativeで書いて各プラットフォームで共有、なんてこともできそうです。",
        "labels": {
          "nodes": [
            {
              "name": "Kotlin",
              "description": "",
              "color": "EC953C"
            },
            {
              "name": "reddit",
              "description": "",
              "color": "d93f0b"
            }
          ]
        },
        "comments": {
          "totalCount": 1,
          "pageInfo": {
            "startCursor": "Y3Vyc29yOnYyOpHOGCTh2g==",
            "endCursor": "Y3Vyc29yOnYyOpHOGCTh2g==",
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": [
            {
              "body": "kotlinx.serialization サポートはけっこう嬉しいですね。",
              "publishedAt": "2018-07-15T06:22:19Z",
              "author": {
                "login": "hkurokawa",
                "url": "https://github.com/hkurokawa",
                "avatarUrl": "https://avatars.githubusercontent.com/u/6446183?v=4"
              }
            }
          ]
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/300",
        "title": "Android Things 1.0.2",
        "body": "https://developer.android.com/things/versions/releases#android_things_102\r\n\r\n特に細かい更新履歴はなく、7月のセキュリティパッチがメインのようです\t",
        "labels": {
          "nodes": [
            {
              "name": "Android Things",
              "description": "",
              "color": "b8f77e"
            }
          ]
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/299",
        "title": "ADDSというKotlin Coroutinesベースのアーキテクチャパターン",
        "body": "https://gist.github.com/michaelzengke/44ac57032f7d877203a0935c99f5ed59\r\n\r\n`Action Delegate Delegatee viewState`でADDSだそうです。\r\nunidirectional data flowで、かつ機能の入れ子もできそうな感じですが文中に出てくる以上のサンプルコードは見つからず…",
        "labels": {
          "nodes": [
            {
              "name": "Kotlin",
              "description": "",
              "color": "EC953C"
            }
          ]
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/298",
        "title": "PrecomputedTextを使ってRecyclerViewのレンダリングを16倍高速化",
        "body": "https://medium.com/google-developers/prefetch-text-layout-in-recyclerview-4acf9103f438\r\n\r\nフォントや文字数にもよりそうですが、かなりインパクトのある結果です。 [TextView#setTextFuture()](https://developer.android.com/reference/androidx/appcompat/widget/AppCompatTextView#settextfuture) は使いでがありそうですね。",
        "labels": {
          "nodes": []
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/297",
        "title": "Android PのAMAが7/19に開催されるそうです",
        "body": "https://www.reddit.com/r/androiddev/comments/8xspo7/were_on_the_engineering_team_for_android_p_ask_us/",
        "labels": {
          "nodes": [
            {
              "name": "reddit",
              "description": "",
              "color": "d93f0b"
            }
          ]
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/296",
        "title": "Android Pで導入されたMagnifier（拡大鏡）の説明",
        "body": "https://medium.com/google-developer-experts/exploring-android-p-magnifier-ddfd06bdecbe\r\n\r\nTextViewを継承していればとくに問題なさそうですが、自分で使う場合も簡単そうです。",
        "labels": {
          "nodes": []
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/295",
        "title": "vsync lockを待たないことでRxAndroidを高速化する提案",
        "body": "https://github.com/ReactiveX/RxAndroid/pull/416\r\n\r\n自分は不勉強にして知らなかったのですが、Looperは最低でも16msec（1フレーム）待つ挙動なのを、API 22から、そのvsync lockingをスキップするAPIが追加されたそうです。\r\n\r\nhttps://developer.android.com/reference/android/os/Message#setAsynchronous(boolean)\r\n\r\nまた API 28 から、それ専用のHandlerを生成するAPIも追加されたようです。\r\n\r\nhttps://developer.android.com/reference/android/os/Handler#createAsync(android.os.Looper)\r\n",
        "labels": {
          "nodes": []
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/294",
        "title": "Retrofitはどうやって動いているか",
        "body": "https://medium.com/@theneckmaster/how-does-retrofit-work-6ecad1bb683b",
        "labels": {
          "nodes": []
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      }
    ]
  }
}