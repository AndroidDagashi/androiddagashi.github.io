{
  "id": "MI_kwDOB4jhdM4Atj9U",
  "number": 355,
  "url": "https://github.com/AndroidDagashi/AndroidDagashi/milestone/355",
  "title": "355 2024-12-01",
  "closedAt": "2024-12-01T10:35:05Z",
  "description": "Kotlin 2.1.0、Gradle 8.11における、Configuration Cacheの改善について、など",
  "issues": {
    "totalCount": 3,
    "pageInfo": {
      "startCursor": "Y3Vyc29yOnYyOpLPf________5vOoW2pCA==",
      "endCursor": "Y3Vyc29yOnYyOpLPf________tPOoXfxTg==",
      "hasPreviousPage": false,
      "hasNextPage": false
    },
    "nodes": [
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/3333",
        "title": "Kotlin 2.1.0",
        "body": "https://blog.jetbrains.com/kotlin/2024/11/kotlin-2-1-0-released/\r\nhttps://kotlinlang.org/docs/whatsnew21.html\r\n\r\nプレビューの新しい言語機能、K2コンパイラ改善、MultiplatformのSwiftエクスポート、Gradleの改善、などの対応が入っています。",
        "labels": {
          "nodes": [
            {
              "name": "Kotlin",
              "description": "",
              "color": "EC953C"
            }
          ]
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/3334",
        "title": "Gradle 8.11における、Configuration Cacheの改善について",
        "body": "https://dev.to/cdsap/gradle-811-faster-configuration-cache-and-improved-configuration-time-ja1\r\n\r\n8.11で追加された、並列設定キャッシュ機能の概要を解説しています",
        "labels": {
          "nodes": []
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      },
      {
        "url": "https://github.com/AndroidDagashi/AndroidDagashi/issues/3335",
        "title": "iOS / Androidアプリの複雑な画面遷移フローを実現するステート駆動な設計手法",
        "body": "https://blog.smartbank.co.jp/entry/2024/11/20/state-based-navigation",
        "labels": {
          "nodes": []
        },
        "comments": {
          "totalCount": 0,
          "pageInfo": {
            "startCursor": null,
            "endCursor": null,
            "hasPreviousPage": false,
            "hasNextPage": false
          },
          "nodes": []
        }
      }
    ]
  }
}